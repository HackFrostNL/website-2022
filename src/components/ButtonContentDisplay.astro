---
interface Item {
    url: string;
    title: string;
}

interface Props {
    title: string;
    items: Item[];
}

const { items, title } = Astro.props;
---

<style>
    #component-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        width: 100%;
        gap: 1rem;
    }

    #display-area,
    .item {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        gap: 1rem;
    }

    .item > a {
        display: inline-block;
        margin-top: 0px;
        margin-bottom: 0px;
        -webkit-transition:
            color 200ms ease,
            border-color 500ms ease;
        transition:
            color 200ms ease,
            border-color 500ms ease;
        font-family: "Open Sans", sans-serif;
        color: #499cc5;
        font-size: 18px;
        line-height: 24px;
        font-weight: 700;
        text-align: center;
        text-decoration: none;
        text-transform: uppercase;
    }

    .item > a:hover {
        text-decoration: underline;
    }

    #button-row {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
    }

    .content-button {
        padding-top: 12px;
        padding-bottom: 12px;
        border: 2px solid transparent;
        background-color: #ffda4a;
        -webkit-transition: all 200ms ease;
        transition: all 200ms ease;
        font-family: Montserrat, sans-serif;
        color: #272727;
        font-size: 20px;
        line-height: 24px;
        font-weight: 500;
        text-align: center;
        text-transform: uppercase;
    }

    .content-button:hover,
    .content-button.active {
        cursor: pointer;
        border-color: #ffda4a;
        background-color: #000;
        color: #ffda4a;
    }
</style>

<script define:vars={{ title: title }}>
    let componentContainer;
    document.addEventListener("DOMContentLoaded", () => {
        componentContainer = document.querySelector(
            `[data-item-container='${title}']`,
        );
        let buttons = Array.from(
            componentContainer.querySelectorAll(`.content-button`),
        );

        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                if (button.dataset.itemTitle) {
                    const currActive = componentContainer.querySelector(
                        "button[class*='active']",
                    );
                    handleClick(button.dataset.itemTitle);
                    button.classList.add("active");
                    currActive?.classList.remove("active");
                }
            });
        });
    });

    function handleClick(title) {
        const displayArea = componentContainer.querySelector("#display-area");
        if (!displayArea) return;

        const currentActive = displayArea.querySelector("[style*='flex']");
        if (currentActive) {
            currentActive.style.display = "none";
        }

        const itemToShow = displayArea.querySelector(
            `[data-item-id="${title}"]`,
        );

        if (itemToShow) {
            itemToShow.style.display = "flex";
            if (currentActive === itemToShow) {
                itemToShow.style.display = "none";
            }
        }
    }
</script>

<div id=`component-wrapper` data-item-container={title}>
    <h1 class="section-title">{title}</h1>
    <div id="button-row">
        {
            items.map((item) => (
                <button class="content-button" data-item-title={item.title}>
                    {item.title}
                </button>
            ))
        }
    </div>
    <div id="display-area">
        {
            items.map((item) => (
                <div
                    class="item"
                    data-item-id={item.title}
                    style="display: none;"
                >
                    {item.url.endsWith(".pdf") ? (
                        <>
                            <object
                                data={item.url}
                                style="width: 90%; height: 70vh;"
                            />
                            <a href={item.url}>Direct Link</a>
                        </>
                    ) : (
                        <img
                            src={item.url}
                            alt={item.title}
                            style="max-width: 100%; margin-top: 20px;"
                        />
                    )}
                </div>
            ))
        }
    </div>
</div>
